# GMOコイン 自動取引システム

**Version: 2.0.0**  
**License: MIT License**  
**Copyright (c) 2024 GMO Coin Bot**

## 概要
GMOコインのAPIを使用した自動取引システムです。設定ファイルを使用してAPIキーや取引パラメータを簡単に管理できます。

## 2024年12月 最新アップデート v2.0.0

### 主な新機能・改善点
- **GUI設定エディタの大幅改善**
  - 2カラム横並びレイアウトで画面効率を向上
  - より直感的な操作性
- **セキュリティ強化**
  - 設定ファイルのバリデーション機能追加
  - 入力値の範囲チェック機能
- **ドキュメント改善**
  - 英語版README.md追加
  - ライセンスファイル追加
  - セキュリティポリシー追加
- **プロジェクト構造の整理**
  - サンプルファイルの追加
  - バージョン管理の改善
- **自動ロット計算に安全マージン（0.95）を導入**
  - 証拠金不足エラーを回避しやすくなりました
- **指定分ごとの自動ポジション監視・強制決済（kill）機能**
  - trades.csvの時間外でポジションが残っていた場合、自動でkill＆損益通知
  - 通常監視時はDiscord通知なし
- **config.jsonに`position_check_interval_minutes`（1～99分）を追加**
  - 設定エディタからも編集可能
- **設定エディタ（config_editor.py）を2カラム横並びレイアウトに改善**
  - 画面が狭くても全項目が見やすくなりました
- **Discord Bot機能を`bot_core.py`として分離・再利用化**
  - 他社FX会社用Botにも流用しやすい設計

---

## ファイル構成
- `main.py`: メインの取引プログラム
- `config_editor.py`: 設定エディタ（GUI）
- `config.json`: 設定ファイル
- `setup.bat`: 設定エディタ起動用バッチファイル
- `trade.bat`: 取引開始用バッチファイル
- `trades.csv`: 取引指示ファイル（列順：取引番号,売買方向,通貨ペア,エントリー時刻,決済時刻,ロット数）
- `DISCORD_COMMANDS.md`: Discordコマンド詳細説明書
- `requirements.txt`: 必要なPythonパッケージ一覧

## ⚠️ 重要な注意事項

### セキュリティ
- **APIキーとAPIシークレットは絶対に他人と共有しないでください**
- **設定ファイル（config.json）は安全に保管してください**
- **GitHubなどにアップロードする前に、必ず機密情報を削除してください**
- **本システムはデモ環境でのテストを強く推奨します**

### リスク管理
- 実際の取引を行う前に、十分なテストを行ってください
- 自動再起動機能を使用する場合、再起動時にポジションが決済される可能性があります
- 長時間運用時は自動再起動機能の活用を推奨します（メモリリーク対策）

## セットアップ

### 1. 必要なライブラリのインストール
```bash
pip install -r requirements.txt
```

または個別インストール：
```bash
pip install requests discord.py psutil
```

## 必要なモジュール一覧
このシステムを動作させるために必要なPythonモジュールです：

- **requests** (>= 2.25.1) - GMOコインAPIとの通信に使用
- **discord.py** (>= 2.0.0) - Discord Bot機能に使用
- **psutil** (>= 5.8.0) - システム監視・自動再起動機能に使用

これらのモジュールは上記の `pip install -r requirements.txt` コマンドで一括インストールされます。

## 1. Windowsユーザー向け：trade.batの設定と使い方

このシステムをWindowsで使う場合、trade.batを使うとダブルクリックで自動取引を開始できます。

---

### trade.batの内容例

```bat
@echo off
echo GMOコイン 自動取引システムを起動します...
python main.py
pause
```

- `python main.py` の部分は、Pythonのバージョンによって `python3 main.py` や `py main.py` でもOKです。
- `pause` は実行後にウィンドウがすぐ閉じないようにするためのものです。

---

### setup.batの内容例（設定エディタ起動用）

```bat
@echo off
echo GMOコイン 設定エディタを起動します...
python config_editor.py
pause
```

- `python config_editor.py` の部分は、Pythonのバージョンによって `python3 config_editor.py` や `py config_editor.py` でもOKです。
- `pause` は実行後にウィンドウがすぐ閉じないようにするためのものです。

---

### 設定手順
1. エクスプローラーでmain.pyがあるフォルダのパスを確認
2. trade.batを右クリック→「編集」で開く
3. 必要に応じてPythonコマンドを修正
4. 保存してダブルクリックで実行

---

## 2. 設定ファイルの作成と編集

#### 方法1: 設定エディタを使用（推奨）
```bash
python config_editor.py
```
または
```bash
setup.bat
```

設定エディタで以下の項目を設定してください：
- **API Key**: GMOコインのAPIキー
- **API Secret**: GMOコインのAPIシークレット
- **Discord Webhook URL**: Discord通知用のWebhook URL
- **取引設定**: スプレッド閾値、ストップロス、テイクプロフィットなど
- **注文設定**: リトライ間隔、最大リトライ回数など

> **WindowsではAPIキーやシークレットの貼り付けにCtrl+C（コピー）とCtrl+V（貼り付け）が使えます。**
> 
> 右クリックメニューはありませんので、キーボードショートカットをご利用ください。

#### 方法2: 手動でconfig.jsonを編集
```json
{
  "api_key": "あなたのAPIキー",
  "api_secret": "あなたのAPIシークレット",
  "discord_webhook_url": "Discord Webhook URL",
  "discord_bot_token": "Discord Botトークン",
  "spread_threshold": 0.01,
  "jitter_seconds": 3,
  "stop_loss_pips": 0,
  "take_profit_pips": 0,
  "entry_order_retry_interval": 5,
  "max_entry_order_attempts": 3,
  "exit_order_retry_interval": 10,
  "max_exit_order_attempts": 3,
  "position_check_interval": 5,
  "position_check_interval_minutes": 10,
  "leverage": 10,
  "risk_ratio": 1.0,
  "autolot": "TRUE",
  "auto_restart_hour": null
}
```

### config.json 各項目の詳細解説

#### API設定項目

- **api_key**: GMOコインのAPIキー（必須）
  - GMOコインの管理画面で発行されるAPIキー
  - 証拠金取得、注文発注、ポジション確認などの権限が必要

- **api_secret**: GMOコインのAPIシークレット（必須）
  - APIキーとペアで使用する秘密鍵
  - 絶対に他人と共有しないでください

- **discord_webhook_url**: Discord通知用のWebhook URL（必須）
  - 取引結果やシステム状態の通知先
  - Discordサーバーのチャンネル設定で作成

- **discord_bot_token**: Discord Botトークン（オプション）
  - Botコマンド機能を使用する場合のみ必要
  - Discord Developer Portalで作成

#### 取引設定項目

- **spread_threshold**: 許容スプレッド（pips単位、デフォルト: 0.01）
  - エントリー時の最大許容スプレッド
  - 例：0.01 = 1pip、0.05 = 5pips
  - スプレッドがこの値を超えるとエントリーをスキップ

- **jitter_seconds**: ランダム遅延時間（秒、デフォルト: 3）
  - エントリー・決済時のランダムな遅延
  - 0～60秒の範囲で設定
  - 同時注文の集中を避ける効果

- **leverage**: レバレッジ（デフォルト: 10）
  - 取引に使用するレバレッジ倍率
  - 1～25倍の範囲で設定
  - 高いレバレッジはリスクも高くなります

- **risk_ratio**: リスク割合（デフォルト: 1.0）
  - 自動ロット計算時の口座残高使用割合
  - 0.1～1.0の範囲（0.1=10%、1.0=100%）
  - 例：0.5なら口座残高の50%まで使用

- **stop_loss_pips**: ストップロス（pips、デフォルト: 0）
  - 自動ストップロスのpips値
  - 0なら無効（手動管理）
  - 例：10なら10pipsの損失で自動決済

- **take_profit_pips**: テイクプロフィット（pips、デフォルト: 0）
  - 自動テイクプロフィットのpips値
  - 0なら無効（手動管理）
  - 例：20なら20pipsの利益で自動決済

#### 注文設定項目

- **entry_order_retry_interval**: エントリー注文リトライ間隔（秒、デフォルト: 5）
  - エントリー失敗時の再試行間隔
  - 1～60秒の範囲で設定
  - 短すぎるとAPI制限に引っかかる可能性

- **max_entry_order_attempts**: エントリー注文最大リトライ回数（デフォルト: 3）
  - エントリー失敗時の最大再試行回数
  - 1～10回の範囲で設定
  - 回数が少ないと成功率が下がる可能性

- **exit_order_retry_interval**: 決済注文リトライ間隔（秒、デフォルト: 10）
  - 決済失敗時の再試行間隔
  - 1～60秒の範囲で設定
  - エントリーより長めに設定することを推奨

- **max_exit_order_attempts**: 決済注文最大リトライ回数（デフォルト: 3）
  - 決済失敗時の最大再試行回数
  - 1～10回の範囲で設定
  - 決済は重要なので多めに設定することを推奨

- **position_check_interval**: ポジション監視間隔（秒、デフォルト: 5）
  - ストップロス・テイクプロフィット監視の間隔
  - 1～60秒の範囲で設定
  - 短すぎるとAPI負荷が高くなる

- **position_check_interval_minutes**: 定期ポジション監視間隔（分、デフォルト: 10）
  - **trades.csvの取引時間外でポジションが残っている場合の強制決済（kill）監視間隔**
  - 1～99分の範囲で設定
  - **具体的な動作：**
    - システムが起動中、指定間隔ごとに全ポジションをチェック
    - trades.csvに記載されていない時間帯でポジションが発見された場合、自動で強制決済
    - 決済後はDiscordに通知（「未認識ポジションを検出し決済しました」）
  - **使用場面：**
    - エントリー処理でエラーが発生し、ポジションが作成されたがシステムが認識できなかった場合
    - 手動でポジションを作成したが、trades.csvの時間外に残ってしまった場合
    - システムの不具合でポジションが残ってしまった場合の安全装置
  - **設定の目安：**
    - 短い間隔（5-10分）：安全性重視、API負荷は高くなる
    - 長い間隔（30-60分）：API負荷軽減、未認識ポジションの検出が遅れる
  - **注意：** 通常の取引時間内ではこの機能は動作しません（trades.csvの時間外のみ）

#### システム設定項目

- **autolot**: 自動ロット計算（デフォルト: "TRUE"）
  - "TRUE"で自動計算、"FALSE"でtrades.csvの値を使用
  - 自動計算時は安全マージン（0.95）が適用される

- **auto_restart_hour**: 自動再起動時間（デフォルト: null）
  - 毎日の自動再起動時刻（0～24時）
  - nullなら無効（連続運転）
  - 例：3なら毎日3:00に再起動
  - メモリリーク対策に効果的


### 取引数量リセット機能

このシステムでは、銘柄別の取引数量を毎日午前0時に自動リセットします。

#### リセットタイミング
- **実行時刻**: 毎日午前0時00分00秒
- **対象**: 銘柄別の一日の取引数量（`symbol_daily_volume`）
- **方法**: 自動スケジューラーによる実行

#### リセット処理の詳細
1. **スケジューラー起動**: システム開始時に自動的に起動
2. **時刻計算**: 次の午前0時までの待機時間を計算
3. **リセット実行**: 午前0時に全銘柄の取引数量を0にリセット
4. **通知送信**: Discordにリセット完了通知を送信
5. **ログ記録**: リセット実行をログファイルに記録

#### リセットの利点
- **正確な日次管理**: 午前0時という明確なタイミングでリセット
- **制限の正確性**: GMOコインの各銘柄1500万通貨制限に正確に対応
- **継続性**: システム稼働中は毎日自動実行
- **透明性**: リセット時刻と実行状況が明確

#### エラーハンドリング
- リセット処理でエラーが発生した場合、1時間待機して再試行
- エラー内容はログファイルに記録
- システム全体の動作には影響しない

#### システム動作フロー
```
システム起動
    ↓
取引数量リセットスケジューラー起動
    ↓
次の午前0時まで待機
    ↓
午前0時に銘柄別取引数量をリセット
    ↓
Discord通知 + ログ記録
    ↓
次の午前0時まで待機（ループ）
```

### 自動ロット計算の仕組み

このシステムでは、GMOコインのAPI仕様に基づいて正確なロット計算を行います。

#### 基本計算式
```
利用可能証拠金 = 証拠金 × risk_ratio × 0.95（安全マージン）
```

#### 通貨ペア別の計算方法

**JPYペア（USD_JPY, EUR_JPY, GBP_JPY, CAD_JPY, CHF_JPY等）:**
- 証拠金は円なので、そのまま計算
- `ロット数 = (利用可能証拠金 × レバレッジ) ÷ 円レート`

**USDペア（EUR_USD, GBP_USD, AUD_USD等）:**
- 証拠金を円からUSDに変換してから計算
- `USD証拠金 = 利用可能証拠金 ÷ USD/JPYレート`
- `ロット数 = (USD証拠金 × レバレッジ) ÷ USDレート`

#### 計算例
証拠金100,000円、レバレッジ15倍、risk_ratio=1.0の場合：

**USD_JPY（レート147.7）:**
- 利用可能証拠金 = 100,000 × 1.0 × 0.95 = 95,000円
- ロット数 = (95,000 × 15) ÷ 147.7 = **約9,650ロット**

**EUR_USD（レート1.1665、USD/JPY=147.7）:**
- USD証拠金 = 95,000 ÷ 147.7 = 643USD
- ロット数 = (643 × 15) ÷ 1.1665 = **約8,270ロット**

**CAD_JPY（レート107.9）:**
- ロット数 = (95,000 × 15) ÷ 107.9 = **約13,200ロット**

#### 制限事項
- 最小ロット数: 1ロット
- 一回の注文上限: 500,000ロット（50万通貨）
- 銘柄別の一日の最大取引数量: 15,000,000ロット（1500万通貨、設定で変更可能）
  - 各銘柄で独立して管理
  - 毎日午前0時に自動リセット
  - 制限に達するとその銘柄の取引が停止
  - 他の銘柄には影響しない




## 取引指示ファイル（trades.csv）の仕様

### 列の順番
```csv
取引番号,売買方向,通貨ペア,エントリー時刻,決済時刻,ロット数
```

### 各列の説明
1. **取引番号**: 取引の識別番号（必須ではないが推奨）
2. **売買方向**: 買い/売りの指定
3. **通貨ペア**: 取引する通貨ペア（例：USD/JPY）
4. **エントリー時刻**: エントリー予定時刻（HH:MM:SS形式）
5. **決済時刻**: 決済予定時刻（HH:MM:SS形式）
6. **ロット数**: 取引ロット数（空欄の場合は自動計算）

### 売買方向表記

#### 対応表記
以下の表記で売買方向を指定できます：

##### 買い（ロング）
- `買` (漢字)
- `long` (英語、小文字)
- `Long` (英語、大文字)
- `l` (短縮形)

##### 売り（ショート）
- `売` (漢字)
- `short` (英語、小文字)
- `Short` (英語、大文字)
- `s` (短縮形)

### 使用例
```csv
取引番号,売買方向,通貨ペア,エントリー時刻,決済時刻,ロット数
1,買,USD/JPY,12:58:00,12:58:05,
2,long,USD/JPY,13:00:00,13:00:05,
3,short,USD/JPY,13:05:00,13:05:05,
4,l,USD/JPY,13:10:00,13:10:05,
5,s,USD/JPY,13:15:00,13:15:05,
```

### 通貨ペア表記

#### 対応形式
- `USD/JPY` (スラッシュ付き)
- `USDJPY` (スラッシュなし)
- `EUR/USD` (スラッシュ付き)
- `EURUSD` (スラッシュなし)

#### 自動変換
- `USDJPY` → `USD_JPY` (API用)
- `USD/JPY` → `USD_JPY` (API用)

### 注意事項
- 売買方向の大文字・小文字は区別されません（`LONG`、`Long`、`long`は全て有効）
- 通貨ペアは自動的に正規化されます（`USDJPY` → `USD_JPY`）
- 無効な表記を指定した場合、エラーメッセージが表示され、その取引はスキップされます

### ロット数の指定・空欄時の動作

- **ロット数を指定した場合（trades.csvのロット数欄に数値がある場合）**
  - 指定したロット数（例: 10000など）がそのまま注文に使われます。
  - 自動ロット計算（autolot）は無効化され、trades.csvの値が優先されます。
  - 設定ファイルの`autolot`が"TRUE"でも、trades.csvでロット数を指定すればその値が使われます。

- **ロット数が空欄の場合**
  - `autolot`が"TRUE"の場合は、自動ロット計算（証拠金・レバレッジ・レート等から計算）でロット数が決定されます。
    - JPYペア、USDペア、クロス通貨ペアも自動で判別し、最適なロット数を算出します。
    - 安全マージン0.95や最大・最小ロット制限も自動適用されます。
  - `autolot`が"FALSE"の場合は、ロット数未指定時のみレバレッジ18倍で自動計算されます（特例）。
  - いずれの場合も、計算結果はDiscord通知やログに明示されます。

- **注意**
  - ロット数が空欄かつautolot=FALSEの場合のみ、レバレッジ18倍で自動計算される仕様です。
  - ロット数が0や不正な値の場合はエラーとなり、その取引はスキップされます。 


--

## トラブルシューティング

### 設定ファイルが見つからない場合
初回実行時に自動的にデフォルト設定ファイルが作成されます。

### API認証エラーが発生する場合
- APIキーとAPIシークレットが正しく設定されているか確認してください
- GMOコインのAPI設定で適切な権限が付与されているか確認してください

### Discord通知が届かない場合
- Webhook URLが正しく設定されているか確認してください
- Discordサーバーの権限設定を確認してください 

## ライセンス

このプロジェクトはMITライセンスの下で公開されています。

## 免責事項

- このソフトウェアは教育目的で提供されています
- 実際の取引での使用は自己責任で行ってください
- 作者は取引による損益について一切の責任を負いません
- 必ずデモ環境で十分なテストを行ってから実環境で使用してください 

## 自動日次損益レポート機能
- 毎日19:00に、その日の総収支（損益）が自動でDiscordに出力されます。
  - 取引の有無にかかわらず、日次の損益サマリーが通知されます。
  - 通知時刻や内容はmain.pyでカスタマイズ可能です。 