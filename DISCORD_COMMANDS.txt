# Discord Botの作成・設定方法（初心者向けガイド）

この自動取引システムのBot機能を使うには、**ご自身のDiscordサーバーにBotを作成・招待し、設定エディタ（config_editor.py）でトークン等を登録する必要があります**。以下の手順で進めてください。

---

## 1. Discord Botを新規作成する
1. [Discord Developer Portal](https://discord.com/developers/applications) にアクセスします。
2. 右上の「New Application」ボタンをクリックし、Botの名前（例：GMOcoinBot）を入力して「Create」します。
3. 左メニューの「Bot」を選択し、「Add Bot」→「Yes, do it!」でBotを作成します。

## 2. Botトークンを取得する
1. 「Bot」画面で「Reset Token」→「Copy」で**Botトークン**をコピーします。
2. このトークンは**絶対に他人に教えないでください**（流出すると悪用されます）。

## 3. 設定エディタ（config_editor.py）でトークンを登録する
1. コマンドプロンプトやターミナルで以下を実行します：
   ```bash
   python config_editor.py
   ```
   または `setup.bat` をダブルクリックでもOKです。
2. 設定エディタの画面が開いたら、
   - 「Discord Botトークン」欄に、先ほどコピーしたトークンを**貼り付け**ます。
   - 他にも「APIキー」「APIシークレット」「Discord Webhook URL」など必要な項目も入力してください。
3. 入力が終わったら「保存」ボタンを押して設定を保存します。

## 4. Botの権限・Intentを設定する
1. Discord Developer Portalの「Bot」画面で「MESSAGE CONTENT INTENT」をONにします。
   - これをONにしないと、Botがメッセージ内容を受信できません。
2. 必要に応じて「PRESENCE INTENT」「SERVER MEMBERS INTENT」もONにしてOKです（必須ではありません）。

## 5. Botをサーバーに招待する
1. 左メニュー「OAuth2」→「URL Generator」を開きます。
2. 「SCOPES」で`bot`にチェックを入れます。
3. 「BOT PERMISSIONS」で「Read Messages/View Channels」「Send Messages」など**最低限の権限**にチェックを入れます。
   - 推奨：
     - Read Messages/View Channels
     - Send Messages
     - Embed Links
     - Attach Files
     - Read Message History
4. 画面下に生成されたURLをコピーし、ブラウザで開きます。
5. Botを追加したいDiscordサーバーを選択し、「認証」→「私は人間です」でBotをサーバーに招待します。
6. サーバー側でBotのロールに「メッセージの読み取り」「メッセージの送信」権限があるかも確認してください。

## 6. main.pyのBot起動設定を確認
- main.pyのBot起動部分は、以下のように**標準実装されています**（追加編集は不要です）。
```python
intents = discord.Intents.default()
intents.message_content = True  # メッセージ内容Intentを有効化
bot = commands.Bot(command_prefix='', intents=intents, case_insensitive=True)
```

## 7. Botを起動して動作確認
1. `python main.py` でプログラムを起動します。
2. DiscordサーバーでBotが「オンライン」になっていれば成功です。
3. 任意のテキストチャンネルで `status` や `command` などのコマンドを送信し、Botが反応するか確認してください。
   - コマンドの先頭に何も付けず、半角小文字で送信します（例：`status`）。
   - 大文字・小文字は区別されません（`KILL`でも`kill`でもOK）。

## 8. トラブル時のチェックポイント
- Botがオフラインの場合：
  - トークンが正しいか、設定エディタで保存したか確認
  - Botがサーバーに招待されているか確認
  - main.pyのBot起動設定が正しいか確認
  - Intent（MESSAGE CONTENT INTENT）がONか確認
- コマンドに反応しない場合：
  - チャンネルの権限設定を確認（Botに発言権限があるか）
  - Botがオンラインか再確認
  - コマンドのスペルミスがないか確認

---

> **セキュリティ注意**
> - Botトークンは絶対に他人に教えないでください。
> - GitHub等にアップロードする際は、config.jsonからトークンを必ず削除してください。
> - 万一トークンが流出した場合は、Discord Developer Portalで「Reset Token」して新しいものに差し替えてください。

---

- 2025-07-11以降、Botは `case_insensitive=True` 設定により、コマンド名の大文字・小文字を区別せず認識します。
  - 例: `kill`, `KILL`, `Kill` どれでも実行可能
- コマンドの先頭に何も付けずに送信してください（例: `status` や `kill`）

---

# Discord Bot コマンド説明書

## 概要
この自動取引システムには、Discord Botを通じて遠隔操作が可能なコマンドが搭載されています。
各コマンドは、取引の監視、システム管理、データ確認などに使用できます。

## コマンド一覧

このBotで利用できるコマンド（main.pyで実装済み）

- kill
- stop
- position
- status
- health
- performance
- backup
- restart
- testlot
- debuglot
- command

### 🔴 緊急時コマンド

#### `kill`
**説明**: 全通貨ペアの全ポジションを即座に決済します
**用途**: 緊急時のリスク回避、市場の急変時
**実行例**: `kill`
**注意**: 実行前に必ず確認してください。取り消しはできません。

#### `stop`
**説明**: 自動取引システムを完全に停止します
**用途**: システムのメンテナンス、手動取引への切り替え
**実行例**: `stop`
**注意**: 停止後は手動で再起動する必要があります。

#### `restart`
**説明**: システムを自動的に再起動します
**用途**: システムの不具合時、設定変更後の再起動
**実行例**: `restart`
**注意**: 再起動前に残っているポジションは自動決済されます。

### 📊 情報確認コマンド

#### `position`
**説明**: 現在保有しているポジションの一覧を表示します
**用途**: ポジション状況の確認、リスク管理
**実行例**: `position`
**表示内容**: 通貨ペア、売買方向（BUY/SELL）、ロット数

#### `status`
**説明**: システムの現在の状態を詳細に表示します
**用途**: システムの健全性確認、パフォーマンス監視
**実行例**: `status`
**表示内容**: メモリ使用量、アクティブポジション数、レートリミット設定、取引結果数など

#### `health`
**説明**: システムの健全性を包括的にチェックします
**用途**: システムの故障診断、予防保守
**実行例**: `health`
**チェック項目**: API接続状態、Discord接続状態、ディスク容量、メモリ使用量、ファイルアクセス、全体状態

#### `performance`
**説明**: 取引パフォーマンスの詳細レポートを表示します
**用途**: 取引戦略の評価、収益性分析
**実行例**: `performance`
**表示内容**: 稼働時間、総取引数（成功/失敗）、勝率、総損益、平均損益、最大ドローダウン、API統計

### 💾 データ管理コマンド

#### `backup`
**説明**: 設定ファイルとデータの手動バックアップを実行します
**用途**: データ保護、設定変更前の安全確保
**実行例**: `backup`
**バックアップ対象**: config.json、trades.csv、main.py、daily_results/、logs/

#### `testlot`
**説明**: ロット計算のテストを実行し、現在の証拠金で各通貨ペアのロット数を計算します
**用途**: ロット計算の正確性確認、リスク管理
**実行例**: `testlot`
**表示内容**:
- 現在の証拠金残高
- 設定レバレッジ
- 各通貨ペア（USD_JPY、EUR_JPY、CHF_JPY、GBP_JPY、EUR_USD、GBP_USD、AUD_JPY、NZD_JPY）の買い/売りロット数

#### 【計算方法の詳細】

testlotコマンドは、現在の証拠金残高・設定レバレッジ・各通貨ペアの最新レートをもとに、以下の手順でロット数を自動計算します：

- **証拠金残高の取得**
  - APIから利用可能証拠金（availableAmount）を取得
- **各通貨ペアのレート取得**
  - 各ペアごとに最新のask（買い）/bid（売り）レートを取得
- **自動ロット計算式**
  - JPYペア：
    - ロット数 = int((証拠金 × risk_ratio × 0.95 × レバレッジ) ÷ 円レート)
  - USDペア：
    - 証拠金をUSD/JPYレートでUSD換算し、
    - ロット数 = int((USD証拠金 × レバレッジ) ÷ 通貨ペアレート)
- **最小1ロット、最大50万ロットの制限あり**
- **買い・売り両方のロット数を計算し表示**

---

#### `debuglot`
**説明**: オートロット計算の詳細なデバッグ情報を出力します
**用途**: 計算根拠やAPIレスポンスの確認、設定値の検証
**実行例**: `debuglot`
**主な出力内容**:
- AUTOLOT/LEVERAGE/SPREAD_THRESHOLDなどの設定値
- 証拠金APIレスポンスの型・内容
- 利用可能証拠金の金額
- 例としてUSD_JPYのロット計算詳細（計算式・途中値）
- エラー時はその内容も表示

#### 【出力内容の詳細】

debuglotコマンドは、以下の情報を詳細にDiscordに出力します：

- 設定値の確認（AUTOLOT, LEVERAGE, SPREAD_THRESHOLD）
- 証拠金APIのレスポンス型・内容、リスト長、最初の要素
- 利用可能証拠金の金額
- 例としてUSD_JPYの買い注文で、
  - 証拠金、レバレッジ、レート、計算式、計算結果（ロット数）
- エラーがあればその内容

---

これにより、ロット計算の根拠やAPI・設定値の状態を詳細に確認できます。

### ℹ️ ヘルプコマンド

#### `command`
**説明**: 利用可能なコマンド一覧とその説明を表示します
**用途**: コマンドの確認、初心者向けヘルプ
**実行例**: `command`
**表示内容**:
- 緊急時コマンド一覧
- 情報確認コマンド一覧
- データ管理コマンド一覧
- ヘルプコマンド一覧
- 使用方法の説明

## コマンド使用のベストプラクティス

### 🚨 緊急時の対応手順
1. **市場急変時**: `position` → `kill`
2. **システム不具合時**: `health` → `restart`
3. **メンテナンス時**: `backup` → `stop`

### 📈 日常的な監視
- **毎日**: `status` でシステム状態確認
- **週次**: `performance` でパフォーマンス確認
- **月次**: `health` で包括的チェック

### 🔧 トラブルシューティング
1. `health` で問題箇所を特定
2. `status` で詳細情報を確認
3. 必要に応じて `restart` を実行
4. 問題が解決しない場合は `backup` 後に `stop`

## 注意事項

### ⚠️ 重要な注意点
- **`kill`コマンド**: 実行前に必ず確認してください
- **`stop`コマンド**: 停止後は手動再起動が必要です
- **`restart`コマンド**: 再起動中は一時的に取引が停止します

### 🔒 セキュリティ
- Discord Bot Tokenは適切に管理してください
- コマンドは信頼できるチャンネルでのみ実行してください
- 定期的にBot Tokenを更新することを推奨します

### 📊 データ管理
- バックアップは定期的に実行してください
- 古いログファイルは自動的に削除されます
- パフォーマンスデータは長期保存されます

## 自動実行機能

### 🔄 自動ヘルスチェック
- **頻度**: 6時間ごと
- **内容**: システム全体の健全性チェック
- **アクション**: 問題検出時は自動再起動

### 💾 自動バックアップ
- **頻度**: 24時間ごと
- **内容**: 設定ファイルとデータの自動バックアップ
- **保持期間**: 30日間

### 🧹 自動クリーンアップ
- **ログファイル**: サイズ制限で自動ローテーション
- **バックアップ**: 30日以上前のファイルを自動削除
- **メモリ**: 使用量が200MB超で自動GC実行

## トラブルシューティング

### よくある問題と対処法

#### コマンドが応答しない
1. Botがオンラインか確認
2. 権限設定を確認
3. チャンネル設定を確認

#### エラーメッセージが表示される
1. `health` で問題箇所を特定
2. ログファイルを確認
3. 必要に応じて `restart` を実行

#### パフォーマンスが低下
1. `status` でメモリ使用量を確認
2. `performance` でAPI呼び出し数を確認
3. 必要に応じて `restart` を実行

## サポート

問題が発生した場合は、以下の手順で対応してください：

1. `health` コマンドで問題を特定
2. `status` コマンドで詳細情報を確認
3. ログファイル（logs/error.log）を確認
4. 必要に応じてシステム管理者に連絡

# 追加: コマンドの大文字・小文字の区別について

- 2025-07-11以降、Botは `case_insensitive=True` 設定により、コマンド名の大文字・小文字を区別せず認識します。
  - 例: `kill`, `KILL`, `Kill` どれでも実行可能
- コマンドの先頭に何も付けずに送信してください（例: `status` や `kill`）

--- 